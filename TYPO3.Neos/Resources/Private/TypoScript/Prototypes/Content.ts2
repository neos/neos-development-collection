# This is the base Content TypoScript object
# It must be extended by all elements that are selectable in the backend
#
# Note: This object inherits from TYPO3.TypoScript:Template because most Content Elements are expected to contain a
# Fluid template. If a Content Element does not render a template (like it is the case for the Plugin Content Elements)
# you should still extend this prototype and override the @class property (see TYPO3.Neos:Plugin).
#
prototype(TYPO3.Neos:Content) < prototype(TYPO3.TypoScript:Template) {
	node = ${node}

	attributes = TYPO3.TypoScript:Attributes
	attributes.class = ''

	# The following is used to automatically append a class attribute that reflects the underlying node type of a TypoScript object,
	# for example "typo3-neos-nodetypes-form", "typo3-neos-nodetypes-headline", "typo3-neos-nodetypes-html", "typo3-neos-nodetypes-image", "typo3-neos-nodetypes-menu" and "typo3-neos-nodetypes-text"
	# You can disable the following line with:
	# prototype(TYPO3.Neos:Content) {
	#   attributes.class.@process.nodeType >
	# }
	# in your site's TypoScript if you don't need that behavior.
	attributes.class.@process.nodeType = TYPO3.TypoScript:Case {
		@context.nodeTypeClassName = ${String.toLowerCase(String.pregReplace(q(node).property('_nodeType.name'), '/[[:^alnum:]]/', '-'))}

		classIsString {
			condition = ${Type.isString(value)}
			renderer = ${String.trim(value) + ' ' + nodeTypeClassName}
		}

		classIsArray {
			condition = ${Type.isArray(value)}
			renderer = ${Array.push(value, nodeTypeClassName)}
		}
	}

	# The following line must not be removed as it adds required meta data to all content elements in backend
	@process.contentElementWrapping {
		expression = TYPO3.Neos:ContentElementWrapping
		@position = 'end 999999999'
	}

	@exceptionHandler = 'TYPO3\\Neos\\TypoScript\\ExceptionHandlers\\NodeWrappingHandler'
}
