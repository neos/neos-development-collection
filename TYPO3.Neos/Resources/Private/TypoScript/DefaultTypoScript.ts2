include: Prototypes/ContentCase.ts2
include: Prototypes/Document.ts2
include: Prototypes/Content.ts2
include: Prototypes/PrimaryContent.ts2
include: Prototypes/ContentCollection.ts2
include: Prototypes/Page.ts2
include: Prototypes/Shortcut.ts2
# Note: The TYPO3.Neos:Breadcrumb prototype only exists for backwards compatibility and will be removed in a future version.
include: Prototypes/Breadcrumb.ts2
include: Prototypes/BreadcrumbMenu.ts2
include: Prototypes/DimensionsMenu.ts2
include: Prototypes/Menu.ts2
include: Prototypes/Plugin.ts2
include: Prototypes/PluginView.ts2
include: Prototypes/ConvertUris.ts2
include: Prototypes/ConvertNodeUris.ts2
include: Prototypes/DocumentMetadata.ts2
include: Prototypes/ContentElementWrapping.ts2
include: Prototypes/ContentElementEditable.ts2
include: Prototypes/NodeUri.ts2
include: Prototypes/ImageUri.ts2
include: Prototypes/FallbackNode.ts2

# The root matcher used to start rendering in Neos
#
# The default is to use a render path of "page", unless the requested format is not "html"
# in which case the format string will be used as the render path (with dots replaced by slashes)
#
root = TYPO3.TypoScript:Case
root {
	shortcut {
		prototype(TYPO3.Neos:Page) {
			body = TYPO3.Neos:Shortcut
		}

		@position = 'start'
		condition = ${q(node).is('[instanceof TYPO3.Neos:Shortcut]')}
		type = 'TYPO3.Neos:Page'
	}

	editPreviewMode {
		@position = 'end 9996'
		possibleEditPreviewModePath = ${documentNode.context.currentRenderingMode.typoScriptPath}
		condition = ${documentNode.context.inBackend && this.possibleEditPreviewModePath != null && this.possibleEditPreviewModePath != ''}
		renderPath = ${'/' + this.possibleEditPreviewModePath}
	}

	layout {
		@position = 'end 9997'
		layout = ${q(node).property('layout') != null && q(node).property('layout') != '' ? q(node).property('layout') : q(node).parents('[subpageLayout]').first().property('subpageLayout')}
		condition = ${this.layout != null && this.layout != ''}
		renderPath = ${'/' + this.layout}
	}

	format {
		@position = 'end 9998'
		condition = ${request.format != 'html'}
		renderPath = ${'/' + String.replace(request.format, '.', '/')}
	}

	default {
		@position = 'end 9999'
		condition = TRUE
		renderPath = '/page'
	}

	@cache {
		mode = 'cached'

		entryIdentifier {
			node = ${node}
			editPreviewMode = ${documentNode.context.currentRenderingMode.name}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${'Node_' + documentNode.identifier}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${Neos.Caching.nodeTag(q(documentNode).parents())}
		}
	}

	# Catch all unhandled exceptions at the root
	@exceptionHandler = 'TYPO3\\Neos\\TypoScript\\ExceptionHandlers\\PageHandler'
}

# Extension of the GlobalCacheIdentifiers prototype
#
# We add the names of workspaces of the current workspace chain (for example, "user-john,some-workspace,live") to the list
# of entry identifier pieces in order to make sure that a specific combination of workspaces has its own content cache entry.
#
prototype(TYPO3.TypoScript:GlobalCacheIdentifiers) {
	workspaceChain = ${documentNode.context.workspace.name + ',' + Array.join(Array.keys(documentNode.context.workspace.baseWorkspaces), ',')}
}