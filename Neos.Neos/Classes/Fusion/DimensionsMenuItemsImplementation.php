<?php

declare(strict_types=1);

namespace Neos\Neos\Fusion;

use Neos\ContentRepository\DimensionSpace\Dimension\ContentDimensionIdentifier;
use Neos\ContentRepository\DimensionSpace\Dimension\ContentDimensionSourceInterface;
use Neos\ContentRepository\DimensionSpace\DimensionSpace\ContentDimensionZookeeper;
use Neos\ContentRepository\DimensionSpace\DimensionSpace\DimensionSpacePoint;
use Neos\ContentRepository\DimensionSpace\DimensionSpace\InterDimensionalVariationGraph;
use Neos\ContentRepository\Projection\Content\NodeInterface;
use Neos\ContentRepository\SharedModel\Node\NodeAggregateIdentifier;
use Neos\ContentRepository\SharedModel\VisibilityConstraints;
use Neos\Flow\Annotations as Flow;

/**
 * Fusion implementation for a dimensions menu.
 *
 * The items generated by this menu will be all possible variants (according to the configured dimensions
 * and presets) of the given node (including the given node).
 *
 * If a 'dimension' is configured via Fusion, only those variants of the the current subgraph
 * that match its other dimension values will be evaluated
 *
 * Main Options:
 * - dimension (optional, string): Name of the dimension which this menu should be limited to. Example: "language".
 * - values (optional, array): If set, only the given dimension values for the given dimension will be evaluated
 * - includeAllPresets (optional, bool): If set, generalizations in the other dimensions will be evaluated additionally
 *   if necessary to fetch a result for a given dimension value
 */
class DimensionsMenuItemsImplementation extends AbstractMenuItemsImplementation
{
    #[Flow\Inject]
    protected ContentDimensionZookeeper $contentDimensionZookeeper;

    #[Flow\Inject]
    protected ContentDimensionSourceInterface $contentDimensionSource;

    #[Flow\Inject]
    protected InterDimensionalVariationGraph $interDimensionalVariationGraph;

    /**
     * @return array<mixed>
     */
    public function getDimension(): array
    {
        return $this->fusionValue('dimension');
    }

    /**
     * Builds the array of Menu items for this variant menu
     * @return array<int,array<string,mixed>>
     */
    protected function buildItems(): array
    {
        $menuItems = [];

        $currentDimensionSpacePoint = $this->currentNode->getDimensionSpacePoint();
        $contentDimensionIdentifierToLimitTo = $this->getContentDimensionIdentifierToLimitTo();
        foreach ($this->contentDimensionZookeeper->getAllowedDimensionSubspace() as $dimensionSpacePoint) {
            $variant = null;
            if ($this->isDimensionSpacePointRelevant($dimensionSpacePoint)) {
                if ($dimensionSpacePoint->equals($currentDimensionSpacePoint)) {
                    $variant = $this->currentNode;
                } else {
                    $nodeAccessor = $this->nodeAccessorManager->accessorFor(
                        $this->currentNode->getContentStreamIdentifier(),
                        $dimensionSpacePoint,
                        VisibilityConstraints::frontend()
                    );
                    $variant = $nodeAccessor->findByIdentifier($this->currentNode->getNodeAggregateIdentifier());
                }

                if (!$variant && $this->includeGeneralizations() && $contentDimensionIdentifierToLimitTo) {
                    $variant = $this->findClosestGeneralizationMatchingDimensionValue(
                        $dimensionSpacePoint,
                        $contentDimensionIdentifierToLimitTo,
                        $this->currentNode->getNodeAggregateIdentifier()
                    );
                }

                $metadata = $this->determineMetadata($dimensionSpacePoint);

                if ($variant === null || !$this->isNodeHidden($variant)) {
                    $menuItems[] = [
                        'node' => $variant,
                        'state' => $this->calculateItemState($variant),
                        'label' => $this->determineLabel($variant, $metadata),
                        'targetDimensions' => $metadata
                    ];
                }
            }
        }

        $valuesToRestrictTo = $this->getValuesToRestrictTo();
        if ($contentDimensionIdentifierToLimitTo && $valuesToRestrictTo) {
            $order = array_flip($valuesToRestrictTo);
            usort($menuItems, function (
                array $menuItemA,
                array $menuItemB
            ) use (
                $order,
                $contentDimensionIdentifierToLimitTo
            ) {
                return (int)$order[$menuItemA['node']?->getDimensionSpacePoint()?->getCoordinate(
                    $contentDimensionIdentifierToLimitTo
                )] <=> (int)$order[$menuItemB['node']?->getDimensionSpacePoint()?->getCoordinate(
                    $contentDimensionIdentifierToLimitTo
                )];
            });
        }

        return $menuItems;
    }

    /**
     * @param DimensionSpacePoint $dimensionSpacePoint
     * @return bool
     */
    protected function isDimensionSpacePointRelevant(DimensionSpacePoint $dimensionSpacePoint): bool
    {
        return !$this->getContentDimensionIdentifierToLimitTo() // no limit to one dimension, so all DSPs are relevant
            // always include the current variant
            || $dimensionSpacePoint->equals($this->currentNode->getDimensionSpacePoint())
            // include all direct variants in the dimension we're limited to unless their values
            // in that dimension are missing in the specified list
            || $dimensionSpacePoint->isDirectVariantInDimension(
                $this->currentNode->getDimensionSpacePoint(),
                $this->getContentDimensionIdentifierToLimitTo()
            )
            && (
                empty($this->getValuesToRestrictTo())
                || in_array(
                    $dimensionSpacePoint->getCoordinate($this->getContentDimensionIdentifierToLimitTo()),
                    $this->getValuesToRestrictTo()
                )
            );
    }

    protected function findClosestGeneralizationMatchingDimensionValue(
        DimensionSpacePoint $dimensionSpacePoint,
        ContentDimensionIdentifier $contentDimensionIdentifier,
        NodeAggregateIdentifier $nodeAggregateIdentifier
    ): ?NodeInterface {
        $generalizations = $this->interDimensionalVariationGraph->getWeightedGeneralizations($dimensionSpacePoint);
        ksort($generalizations);
        foreach ($generalizations as $generalization) {
            if (
                $generalization->getCoordinate($contentDimensionIdentifier)
                === $dimensionSpacePoint->getCoordinate($contentDimensionIdentifier)
            ) {
                $nodeAccessor = $this->nodeAccessorManager->accessorFor(
                    $this->currentNode->getContentStreamIdentifier(),
                    $generalization,
                    VisibilityConstraints::frontend()
                );
                $variant = $nodeAccessor->findByIdentifier($nodeAggregateIdentifier);
                if ($variant) {
                    return $variant;
                }
            }
        }

        return null;
    }

    /**
     * @return array<string,mixed>
     */
    protected function determineMetadata(DimensionSpacePoint $dimensionSpacePoint): array
    {
        $metadata = $dimensionSpacePoint->coordinates;
        array_walk($metadata, function (&$dimensionValue, $rawDimensionIdentifier) {
            $dimensionIdentifier = new ContentDimensionIdentifier($rawDimensionIdentifier);
            $dimensionValue = [
                'value' => $dimensionValue,
                'label' => $this->contentDimensionSource->getDimension($dimensionIdentifier)
                    ?->getValue($dimensionValue)?->getConfigurationValue('label') ?: $dimensionIdentifier,
                'isPinnedDimension' => (
                    !$this->getContentDimensionIdentifierToLimitTo()
                    || $dimensionIdentifier->equals($this->getContentDimensionIdentifierToLimitTo())
                )
            ];
        });

        return $metadata;
    }

    /**
     * @param array<string,mixed> $metadata
     */
    protected function determineLabel(?NodeInterface $variant = null, array $metadata = []): string
    {
        if ($this->getContentDimensionIdentifierToLimitTo()) {
            return $metadata[(string)$this->getContentDimensionIdentifierToLimitTo()]['label'] ?: '';
        } else {
            if ($variant) {
                return $variant->getLabel() ?: '';
            } else {
                return array_reduce($metadata, function ($carry, $item) {
                    return $carry . (empty($carry) ? '' : '-') . $item['label'];
                }, '');
            }
        }
    }

    protected function calculateItemState(?NodeInterface $variant = null): string
    {
        if (is_null($variant)) {
            return self::STATE_ABSENT;
        }

        if ($variant === $this->currentNode) {
            return self::STATE_CURRENT;
        }

        return self::STATE_NORMAL;
    }

    /**
     * In some cases generalization of the other dimension values is feasible
     * to find a dimension space point in which a variant can be resolved
     * @return bool
     */
    protected function includeGeneralizations(): bool
    {
        return $this->getContentDimensionIdentifierToLimitTo() && $this->fusionValue('includeAllPresets');
    }

    /**
     * @return ContentDimensionIdentifier|null
     */
    protected function getContentDimensionIdentifierToLimitTo(): ?ContentDimensionIdentifier
    {
        return $this->fusionValue('dimension') ? new ContentDimensionIdentifier($this->fusionValue('dimension')) : null;
    }

    /**
     * @return array<string,mixed>
     */
    protected function getValuesToRestrictTo(): array
    {
        return $this->fusionValue('values') ?? ($this->fusionValue('presets') ?? []);
    }
}
