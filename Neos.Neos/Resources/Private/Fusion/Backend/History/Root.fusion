include: resource://Neos.Fusion/Private/Fusion/Root.fusion

Neos.Neos.Module.Management.HistoryController.index = Template {
	templatePath = 'resource://Neos.Neos/Private/Templates/Module/Management/History/Index.html'
	eventsByDate = ${eventsByDate}
	nextPage = ${nextPage}

	eventRenderer = Neos.Neos:History.EventRenderer
}

prototype(Neos.Neos:History.EventRenderer) < prototype(Case) {
	nodeEvent {
		condition = ${event.eventType == 'Node.Published'}
		type = 'Neos.Neos:History.NodeEventRenderer'
	}

	accountCreatedEvent {
		condition = ${event.eventType == 'Account.Created'}
		type = 'Neos.Neos:History.AccountCreatedEvent'
	}
	accountDeletedEvent {
		condition = ${event.eventType == 'Account.Deleted'}
		type = 'Neos.Neos:History.AccountDeletedEvent'
	}
}

#
# Node events
#

prototype(Neos.Neos:History.NodeEventRenderer) < prototype(Array) {
	@context.documentEventsByType = ${Neos.Array.groupBy(Neos.Array.filter(event.childEvents, 'documentEvent'), 'eventType')}
	@context.contentEventsByType = ${Neos.Array.groupBy(Neos.Array.filterNegated(event.childEvents, 'documentEvent'), 'eventType')}

	documentEvents = Collection {
		collection = ${documentEventsByType}
		itemName = 'eventsOfMatchedType'

		itemRenderer = Case {
			default {
				condition = TRUE
				type = ${'Neos.Neos:History.PublishedNode.' + eventsOfMatchedType[0].eventType}
			}
		}
	}

	contentEvents = Neos.Neos:History.PublishedNode.ContentChanged {
		subEventType = ${Array.first(Array.first(contentEventsByType)).eventType}
		@if.hasContentEvents = ${Array.length(contentEventsByType) > 0}
	}
}

prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) < prototype(Template) {
	templatePath = 'resource://Neos.Neos/Private/Templates/Module/Management/History/Index.html'
	sectionName = 'eventElement'

	subEventType = ${eventsOfMatchedType[0].eventType}
	event = ${event}
	linkedNode = Template {
		templatePath = 'resource://Neos.Neos/Private/Templates/Module/Management/History/NodeLink.html'
		event = ${event}
	}
	user = Template {
		templatePath = 'resource://Neos.Neos/Private/Templates/Module/Management/History/User.html'
		event = ${event}
	}

}

prototype(Neos.Neos:History.PublishedNode.Node.Adopt) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.adopted'
	descriptionTranslationArguments = ${[this.user, Neos.Rendering.renderDimensions(eventsOfMatchedType[0].data.targetDimensions), I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.Node.LabelChanged) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.renamed'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), eventsOfMatchedType[0].data.oldLabel, this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.Node.Added) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.added'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.Node.Removed) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.removed'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.Node.Copy) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.copied'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.Node.Move) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.moved'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.Node.Updated) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.changed'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.ContentChanged) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationId = 'history.eventDescription.node.changedContent'
	descriptionTranslationArguments = ${[this.user, I18n.translate(Neos.Rendering.labelForNodeType(event.data.documentNodeType)), this.linkedNode]}
}

prototype(Neos.Neos:History.PublishedNode.MissingEvent) < prototype(Neos.Neos:History.PublishedNode.AbstractSubEvent) {
	descriptionTranslationArguments = ${[this.user]}
}

#
# Account events
#

prototype(Neos.Neos:History.AbstractAccountEvent) < prototype(Template) {
	templatePath = 'resource://Neos.Neos/Private/Templates/Module/Management/History/Index.html'
	sectionName = 'eventElement'

	user = Template {
		templatePath = 'resource://Neos.Neos/Private/Templates/Module/Management/History/User.html'
		event = ${event}
	}

	event = ${event}
	descriptionTranslationArguments = ${[this.user, event.data.accountIdentifier, event.data.name]}
}

prototype(Neos.Neos:History.AccountCreatedEvent) < prototype(Neos.Neos:History.AbstractAccountEvent) {
	descriptionTranslationId = 'history.eventDescription.account.created'
}

prototype(Neos.Neos:History.AccountDeletedEvent) < prototype(Neos.Neos:History.AbstractAccountEvent) {
	descriptionTranslationId = 'history.eventDescription.account.deleted'
}

