include: Prototypes/ContentCase.fusion
include: Prototypes/Document.fusion
include: Prototypes/Content.fusion
include: Prototypes/ContentComponent.fusion
include: Prototypes/PrimaryContent.fusion
include: Prototypes/ContentCollection.fusion
include: Prototypes/Page.fusion
include: Prototypes/Shortcut.fusion
include: Prototypes/BreadcrumbMenu.fusion
include: Prototypes/DimensionsMenu.fusion
include: Prototypes/Menu.fusion
include: Prototypes/MenuItems.fusion
include: Prototypes/BreadcrumbMenuItems.fusion
include: Prototypes/DimensionsMenuItems.fusion
include: Prototypes/Plugin.fusion
include: Prototypes/PluginView.fusion
include: Prototypes/ConvertUris.fusion
include: Prototypes/ConvertNodeUris.fusion
include: Prototypes/DocumentMetadata.fusion
include: Prototypes/Editable.fusion
include: Prototypes/ContentElementWrapping.fusion
include: Prototypes/ContentElementEditable.fusion
include: Prototypes/NodeUri.fusion
include: Prototypes/ImageUri.fusion
include: Prototypes/NodeLink.fusion
include: Prototypes/FallbackNode.fusion

# The root matcher used to start rendering in Neos
#
# The default is to use a render path of "page", unless the requested format is not "html"
# in which case the format string will be used as the render path (with dots replaced by slashes)
#
root = Neos.Fusion:Case
root {
	shortcut {
		prototype(Neos.Neos:Page) {
			body = Neos.Neos:Shortcut
		}

		@position = 'start'
		condition = ${q(node).is('[instanceof Neos.Neos:Shortcut]')}
		type = 'Neos.Neos:Page'
	}

	editPreviewMode {
		@position = 'end 9996'
		possibleEditPreviewModePath = ${documentNode.context.currentRenderingMode.fusionPath}
		condition = ${documentNode.context.inBackend && this.possibleEditPreviewModePath != null && this.possibleEditPreviewModePath != ''}
		renderPath = ${'/' + this.possibleEditPreviewModePath}
	}

	format {
		@position = 'end 9997'
		condition = ${request.format != 'html'}
		renderPath = ${'/' + String.replace(request.format, '.', '/')}
	}

	documentType {
		@position = 'end 9998'
		condition = Neos.Fusion:CanRender {
			type = ${q(documentNode).property('_nodeType.name')}
		}
		type = ${q(documentNode).property('_nodeType.name')}
	}

	default {
		@position = 'end 9999'
		condition = true
		renderPath = '/page'
	}

	@cache {
		mode = 'cached'

		entryIdentifier {
			node = ${node}
		}
		entryTags {
			# Whenever the node changes the matched condition could change
			1 = ${Neos.Caching.nodeTag(documentNode)}
			# Whenever one of the parent nodes changes the layout could change
			2 = ${Neos.Caching.nodeTag(q(documentNode).parents())}
		}
	}

	# Catch all unhandled exceptions at the root
	@exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\PageHandler'
}

# The error matcher used to render errors that are configured for fusion rendering
#
# The matcher receives the context values `exception`, `renderingOptions`, `statusCode`,
# `statusMessage` and `referenceCode`.
#
# By default the standard error template is rendered, but by extending the matcher
# custom rendering can be implemented
#
error = Neos.Fusion:Case {
	default {
	@position = 'end 9999'
	condition = true
	renderer = Neos.Fusion:Template {
		templatePath = 'resource://Neos.Neos/Private/Templates/Error/Index.html'
		layoutRootPath = 'resource://Neos.Neos/Private/Layouts/'

		exception = ${exception}
		renderingOptions = ${renderingOptions}
		statusCode = ${statusCode}
		statusMessage = ${statusMessage}
		referenceCode = ${referenceCode}
	}
	}
}


# Extension of the GlobalCacheIdentifiers prototype
#
# We add the names of workspaces of the current workspace chain (for example, "user-john,some-workspace,live") to the list
# of entry identifier pieces in order to make sure that a specific combination of workspaces has its own content cache entry.
#
prototype(Neos.Fusion:GlobalCacheIdentifiers) {
	workspaceChain = ${documentNode.context.workspace.name + ',' + Array.join(Array.keys(documentNode.context.workspace.baseWorkspaces), ',')}
	editPreviewMode = ${documentNode.context.currentRenderingMode.name}
}
