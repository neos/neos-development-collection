# This is a helper TypoScript object which is used to render all of the child elements
# of a current node.
prototype(Neos.Neos:ContentCollectionRenderer) < prototype(Neos.Fusion:Collection) {
	@context.nodeAvailable = ${node && String.length(node.context.workspace.name)}
	# Set context removedContentShown to get removed nodes too.
	# Needed for publish function to be able to publish removed nodes.
	collection = ${nodeAvailable ? q(node).children() : []}
	# Render every item by its own TS object
	itemRenderer = Neos.Neos:ContentCase
	itemName = 'node'
	iterationName = 'iterator'

	# Using a processor here and not an Array as ContentCollectionRenderer to not push important userland properties further down.
	@process.appendRemovedContentForBackend = Neos.Fusion:Array {
		visibleContent = ${value}

		removedContent = Neos.Fusion:Collection {
			collection = ${nodeAvailable ? q(node).context({'removedContentShown': true}).children('[_removed = true]') : []}
			# Render every item by its own TS object
			itemRenderer = Neos.Neos:ContentElementWrapping
			itemName = 'node'
			iterationName = 'iterator'
		}

		@if.onlyInBackend = ${nodeAvailable && node.context.inBackend}
	}

	@exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\BubblingHandler'
}

prototype(Neos.Neos:ContentCollection) < prototype(Neos.Fusion:Tag) {
	tagName = 'div'

	attributes = Neos.Fusion:Attributes

	# The following is used to automatically append class attribute with "neos-contentcollection" needed for editing.
	# You can disable the following line with:
	# prototype(Neos.Neos:ContentCollection) {
	#   attributes.class.@process.collectionClass >
	# }
	# in your site's TypoScript if you don't need that behavior.
	attributes.class.@process.collectionClass = Neos.Fusion:Case {
		@context.collectionClass = 'neos-contentcollection'

		classIsString {
			condition = ${Type.isString(value)}
			renderer = ${String.trim(value + ' ' + collectionClass)}
		}

		classIsArray {
			condition = ${Type.isArray(value)}
			renderer = ${Array.push(value, collectionClass)}
		}
	}

	nodePath = 'to-be-set-by-user'

	# You may override this to get your content collection from a different place than the current node.
	# The Eel helper is used to provide a better error message if no content collection could be found.
	@context.node = ${Neos.Node.nearestContentCollection(node, this.nodePath)}

	content = Neos.Neos:ContentCollectionRenderer

	# We have to define contentElementWrapping, because we do not inherit from Neos.Neos:Content
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping

	@cache {
		mode = 'cached'

		entryIdentifier {
			collection = ${node}
		}

		entryTags {
			1 = ${'DescendantOf_' + node.identifier}
			2 = ${'Node_' + node.identifier}
		}

		maximumLifetime = ${q(node).context({'invisibleContentShown': true}).children().cacheLifetime()}
	}

	@exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}

prototype(Neos.Neos:ContentCollection) {
	prototype(Neos.Neos:ContentCollection) {
		# Make nested ContentCollections be embedded by default.
		# Usually there's no need for a separate cache entry for nested ContentCollections, but depending on the use-case
		# the mode can safely be switched to 'cached'.
		@cache {
			mode = 'embed'
		}
	}
}
