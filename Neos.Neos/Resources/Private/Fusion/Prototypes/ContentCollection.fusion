# This is a helper Fusion object which is used to render all of the child elements
# of a current node.
prototype(Neos.Neos:ContentCollectionRenderer) < prototype(Neos.Fusion:Loop) {
  @context.nodeAvailable = ${node}
  # Set context removedContentShown to get removed nodes too.
  # Needed for publish function to be able to publish removed nodes.
  items = ${nodeAvailable ? q(node).children() : []}

  # Render every item by its own Fusion object
  itemRenderer = Neos.Neos:ContentCase
  itemName = 'node'
  iterationName = 'iterator'

  @exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\BubblingHandler'
}

prototype(Neos.Neos:ContentCollection) < prototype(Neos.Fusion:Tag) {
  tagName = 'div'

  attributes = Neos.Fusion:DataStructure

  # The following is used to automatically append class and data attribute needed for editing.
  # You can disable the behavior in your site's Fusion with:
  # prototype(Neos.Neos:ContentCollection) {
  #   attributes.class.@process.collectionClass >
  # }
  attributes {
    class.@process.collectionClass = ${Array.push(value, 'neos-contentcollection')}
    data-__neos-insertion-anchor = true
    data-__neos-insertion-anchor.@if.onlyRenderInBackend = ${Neos.Node.inBackend(documentNode) && node.context.currentRenderingMode.edit}
  }

  # Doesn't need to be set, if the node is a content collection.
  nodePath = 'to-be-set-by-user'

  # You may override this to get your content collection from a different place than the current node.
  # The Eel helper is used to provide a better error message if no content collection could be found.
  @context.node = ${Neos.Node.nearestContentCollection(node, this.nodePath)}

  content = Neos.Neos:ContentCollectionRenderer

  # We have to define contentElementWrapping, because we do not inherit from Neos.Neos:Content
  @process.contentElementWrapping = Neos.Neos:ContentElementWrapping

  @cache {
    mode = 'cached'

    entryIdentifier {
      collection = ${Neos.Caching.entryIdentifierForNode(node)}
    }

    entryTags {
      # A cache entry with this tag will be flushed
			# whenever a node (for any variant) that is a descendant (child on any level)
			# of one of the given nodes is updated.
      1 = ${Neos.Caching.descendantOfTag(node)}
      # A cache entry with this tag will be flushed
			# whenever one of the given nodes (for any variant) is updated.
      2 = ${Neos.Caching.nodeTag(node)}
    }
  }

  @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}

prototype(Neos.Neos:ContentCollection) {
  prototype(Neos.Neos:ContentCollection) {
    # Make nested ContentCollections be embedded by default.
    # Usually there's no need for a separate cache entry for nested ContentCollections, but depending on the use-case
    # the mode can safely be switched to 'cached'.
    @cache {
      mode = 'embed'
    }
  }
}
