# This is a helper Fusion object which is used to render all of the child elements
# of a current node.
prototype(Neos.Neos:ContentCollectionRenderer) < prototype(Neos.Fusion:Loop) {
  @context.nodeAvailable = ${node && String.length(node.context.workspace.name)}
  # Set context removedContentShown to get removed nodes too.
  # Needed for publish function to be able to publish removed nodes.
  items = ${nodeAvailable ? q(node).children() : []}

  # To ensure backwards compatibility override items if collection is set
  items.@process.collectionLegacy = ${this.collection}
  items.@process.collectionLegacy.@if.hasCollectionProp = ${this.collection != null && Array.length(this.collection) > 0}

  # Render every item by its own Fusion object
  itemRenderer = Neos.Neos:ContentCase
  itemName = 'node'
  iterationName = 'iterator'

  @exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\BubblingHandler'
}

prototype(Neos.Neos:ContentCollection) < prototype(Neos.Fusion:Tag) {
  tagName = 'div'

  attributes = Neos.Fusion:DataStructure

  # The following is used to automatically append class and data attribute needed for editing.
  # You can disable the following line with:
  # prototype(Neos.Neos:ContentCollection) {
  #   attributes.class.@process.collectionClass >
  # }
  # in your site's Fusion if you don't need that behavior.
  attributes {
    class.@process.collectionClass = Neos.Fusion:Case {
      @context.collectionClass = 'neos-contentcollection'

      classIsString {
        condition = ${Type.isString(value)}
        renderer = ${String.trim(value + ' ' + collectionClass)}
      }

      classIsArray {
        condition = ${Type.isArray(value)}
        renderer = ${Array.push(value, collectionClass)}
      }
    }

    data-__neos-insertion-anchor = true
    data-__neos-insertion-anchor.@if.onlyRenderInBackend = ${node.context.inBackend && node.context.currentRenderingMode.edit}
  }

  nodePath = 'to-be-set-by-user'

  # You may override this to get your content collection from a different place than the current node.
  # The Eel helper is used to provide a better error message if no content collection could be found.
  @context.node = ${Neos.Node.nearestContentCollection(node, this.nodePath)}

  content = Neos.Neos:ContentCollectionRenderer

  # We have to define contentElementWrapping, because we do not inherit from Neos.Neos:Content
  @process.contentElementWrapping = Neos.Neos:ContentElementWrapping

  @cache {
    mode = 'cached'

    entryIdentifier {
      collection = ${node}
    }

    entryTags {
      1 = ${Neos.Caching.descendantOfTag(node)}
      2 = ${Neos.Caching.nodeTag(node)}
    }

    maximumLifetime = ${q(node).context({'invisibleContentShown': true}).children().cacheLifetime()}
  }

  @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}

prototype(Neos.Neos:ContentCollection) {
  prototype(Neos.Neos:ContentCollection) {
    # Make nested ContentCollections be embedded by default.
    # Usually there's no need for a separate cache entry for nested ContentCollections, but depending on the use-case
    # the mode can safely be switched to 'cached'.
    @cache {
      mode = 'embed'
    }
  }
}
