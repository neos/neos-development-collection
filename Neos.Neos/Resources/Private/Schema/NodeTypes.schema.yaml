type: dictionary
additionalProperties:
  # every property here is a Node Type
  type: dictionary
  properties:
    'properties':
      type: dictionary
      additionalProperties:
        # for each property...
        type: dictionary
        properties:
          'ui':
            # here, we specify ONLY the "ui" part of the schema, as the remaining parts
            # are already specified in the NodeTypes schema of the ContentRepository package
            type: dictionary
            additionalProperties: FALSE
            properties:

              'label': { type: string, description: "Human-readable label for this property." }

              'help':
                type: dictionary
                additionalProperties: FALSE
                properties:
                  'message': { type: string, description: "Help text for this property. Supports markdown." }
                  'thumbnail': { type: string, description: "Url of a thumbnail-image to display alongside the help-message. (resource://-uris are resolved)"}

              'reloadIfChanged': { type: boolean, description: "If this property changes, should a element refresh occur?" }

              'reloadPageIfChanged': { type: boolean, description: "If this property changes, should a page reload occur?" }

              'inlineEditable': { type: boolean, description: "Is this property inline editable, i.e. edited directly on the page through Aloha/Hallo?" }

              'aloha':
                type: dictionary
                additionalProperties: FALSE
                properties:

                  'format':
                    type: 'dictionary'
                    additionalProperties: FALSE
                    properties:
                      'strong': { type: boolean }
                      'b': { type: boolean }
                      'em': { type: boolean }
                      'i': { type: boolean }
                      'u': { type: boolean }
                      'del': { type: boolean }
                      'sub': { type: boolean }
                      'sup': { type: boolean }
                      'p': { type: boolean }
                      'h1': { type: boolean }
                      'h2': { type: boolean }
                      'h3': { type: boolean }
                      'h4': { type: boolean }
                      'h5': { type: boolean }
                      'h6': { type: boolean }
                      'pre': { type: boolean }
                      'removeFormat': { type: boolean }

                  'table':
                    additionalProperties: FALSE
                    properties:
                      'table': { type: boolean }

                  'link':
                    additionalProperties: FALSE
                    properties:
                      'a': { type: boolean }

                  'list':
                    additionalProperties: FALSE
                    properties:
                      'ol': { type: boolean }
                      'ul': { type: boolean }

                  'alignment':
                    additionalProperties: FALSE
                    properties:
                      'right': { type: boolean }
                      'left': { type: boolean }
                      'center': { type: boolean }
                      'justify': { type: boolean }
                      'top': { type: boolean }
                      'middle': { type: boolean }
                      'bottom': { type: boolean }

                  'formatlesspaste':
                    additionalProperties: FALSE
                    properties:
                      'button': { type: boolean }
                      'formatlessPasteOption': { type: boolean }
                      'strippedElements':
                        type: array
                        items: { type: string, description: "List of HTML tags. If not set the default setting is used." }

                  'autoparagraph': { type: boolean, description: "Automatically wrap non-wrapped text blocks in paragraph blocks." }

                  'placeholder': { type: string, description: "Optional text that will be rendered in the aloha editor when there is no content." }

              'inspector':
                type: dictionary
                additionalProperties: FALSE
                properties:

                  'group': { type: ['string', 'null'], description: 'Identifier of the inspector group in which this property should be edited. If not set, will not appear in inspector at all.' }

                  'position': { type: integer, description: 'Position inside the inspector group, small numbers are sorted on top' }

                  'editor': { type: string, description: 'Name of the JavaScript Editor Class which is instanciated to edit this element in the inspector.' }

                  'editorOptions': { type: dictionary, description: 'options for the given editor' }

                  'editorListeners':
                    type: dictionary
                    additionalProperties:
                      type: dictionary
                      additionalProperties: FALSE
                      properties:
                        'property': { type: ['string'], description: 'The name of an observed property in the same NodeType.' }
                        'handler': { type: ['string'], description: 'The path to a handler JavaScript object, similar to custom editors and validators.' }
                        'handlerOptions':  { type: dictionary, description: 'options for the given handler' }

    'fusion':
      # here we specify only the neos specific options of the NodeType schema,
      # other options might be defined by cr or other packages
      type: dictionary
      additionalProperties: TRUE
      properties:
        prototypeGenerator:
          - { type: null }
          - { type: string, format: class-name }

    'ui':
      # here, we specify ONLY the "ui" part of the schema, as the remaining parts
      # are already specified in the NodeTypes schema of the ContentRepository package
      type: dictionary
      additionalProperties: FALSE
      properties:

        'label': { type: string, description: "Human-readable label for this Node Type." }

        'help':
          type: dictionary
          additionalProperties: FALSE
          properties:
            'message': { type: string, description: "Help text for this Node Type. Supports markdown." }

        'icon': { type: string, description: "Icon class" }

        'inlineEditable': { type: boolean, description: "If TRUE, it is possible to interact with this Node directly in the content view. If FALSE, an overlay is shown preventing any interaction with the node." }

        'group': { type: string, description: "Name of the group this content element is grouped into for the 'New Content Element' dialog." }

        'position': { type: integer, description: 'Position of the node type in the insert new panels' }

        'inspector':
          type: dictionary
          additionalProperties: FALSE
          properties:

            'tabs':
              type: dictionary
              additionalProperties:

                # for each inspector tab:
                type: dictionary
                additionalProperties: FALSE
                properties:

                  'label': { type: string, description: "Human-readable label for this Inspector Tab." }

                  'icon': { type: string, description: "CSS Class for displaying an icon for each tab." }

                  'position': { type: integer, description: 'Position of the inspector tab, small numbers are sorted on left' }

            'groups':
              type: dictionary
              additionalProperties:

                # for each inspector group:
                type: dictionary
                additionalProperties: FALSE
                properties:

                  'label': { type: string, description: "Human-readable label for this Inspector Group." }

                  'tab': { type: string, description: "Reference to a tab identifier." }

                  'position': { type: integer, description: 'Position of the inspector group, small numbers are sorted on top' }

                  'collapsed': { type: boolean, description: 'If TRUE, the group in the inspector panel is collapsed by default.' }

                  'icon': { type: string, description: "CSS Class for displaying an icon for each group." }

            'views':
              type: dictionary
              additionalProperties:

                # for each inspector view:
                type: dictionary
                additionalProperties: FALSE
                properties:

                  'label': { type: string, description: "Human-readable label for this view." }

                  'group': { type: string, description: "Name of the group this view is grouped into" }

                  'view': { type: string, description: "The view implementation" }

                  'viewOptions': { type: dictionary, description: "Options for the view" }

                  'position': { type: integer, description: 'Position of the view, small numbers are sorted on top' }

        'search':
          type: dictionary
          additionalProperties: FALSE
          properties:

            'searchCategory': { type: string, description: "If searching for this node type in the search, the results will be grouped by this category." }
