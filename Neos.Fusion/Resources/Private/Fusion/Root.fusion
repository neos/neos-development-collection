prototype(Neos.Fusion:Array).@class = 'Neos\\Fusion\\FusionObjects\\ArrayImplementation'
prototype(Neos.Fusion:RawArray).@class = 'Neos\\Fusion\\FusionObjects\\RawArrayImplementation'
prototype(Neos.Fusion:Join).@class = 'Neos\\Fusion\\FusionObjects\\JoinImplementation'
prototype(Neos.Fusion:DataStructure).@class = 'Neos\\Fusion\\FusionObjects\\DataStructureImplementation'
prototype(Neos.Fusion:Template).@class = 'Neos\\Fusion\\FusionObjects\\TemplateImplementation'
prototype(Neos.Fusion:Case).@class = 'Neos\\Fusion\\FusionObjects\\CaseImplementation'
prototype(Neos.Fusion:Matcher).@class = 'Neos\\Fusion\\FusionObjects\\MatcherImplementation'
prototype(Neos.Fusion:Renderer).@class = 'Neos\\Fusion\\FusionObjects\\RendererImplementation'
prototype(Neos.Fusion:Value).@class = 'Neos\\Fusion\\FusionObjects\\ValueImplementation'
prototype(Neos.Fusion:Component).@class = 'Neos\\Fusion\\FusionObjects\\ComponentImplementation'
prototype(Neos.Fusion:CanRender).@class = 'Neos\\Fusion\\FusionObjects\\CanRenderImplementation'
prototype(Neos.Fusion:DebugDump) {
  @class = 'Neos\\Fusion\\FusionObjects\\DebugDumpImplementation'
  value = ${value}
  enabled = true
}
prototype(Neos.Fusion:Debug) {
  @class = 'Neos\\Fusion\\FusionObjects\\DebugImplementation'
  value = ${value}
}
prototype(Neos.Fusion:Collection) {
  @class = 'Neos\\Fusion\\FusionObjects\\CollectionImplementation'
  itemName = 'item'
  itemKey = 'itemKey'
  iterationName = 'iterator'
}
prototype(Neos.Fusion:RawCollection) {
  @class = 'Neos\\Fusion\\FusionObjects\\RawCollectionImplementation'
  itemName = 'item'
  itemKey = 'itemKey'
  iterationName = 'iterator'
}
prototype(Neos.Fusion:Loop) {
  @class = 'Neos\\Fusion\\FusionObjects\\LoopImplementation'
  itemName = 'item'
  itemKey = 'itemKey'
  iterationName = 'iterator'
}
prototype(Neos.Fusion:Map) {
  @class = 'Neos\\Fusion\\FusionObjects\\MapImplementation'
  itemName = 'item'
  itemKey = 'itemKey'
  iterationName = 'iterator'
}
prototype(Neos.Fusion:Reduce) {
  @class = 'Neos\\Fusion\\FusionObjects\\ReduceImplementation'
  itemName = 'item'
  itemKey = 'itemKey'
  carryName = 'carry'
  iterationName = 'iterator'
  initialValue = null
}

# Render an HTTP response header
#
prototype(Neos.Fusion:Http.ResponseHead) {
  @class = 'Neos\\Fusion\\FusionObjects\\Http\\ResponseHeadImplementation'
  headers = Neos.Fusion:DataStructure
}

# Render an HTTP message (response)
#
# This is a convenient base prototype for rendering documents.
#
# Usage:
# page = Neos.Fusion:Http.Message {
#   httpResponseHead {
#     statusCode = 404
#     headers.Content-Type = 'application/json'
#   }
# }
#
#
prototype(Neos.Fusion:Http.Message) < prototype(Neos.Fusion:Join) {
  @class = 'Neos\\Fusion\\FusionObjects\\HttpResponseImplementation'
  httpResponseHead = Neos.Fusion:Http.ResponseHead
  httpResponseHead.@position = 'start 1000'
}

# Renders attributes of a HTML tag
#
# Usage:
# attributes = Neos.Fusion:Attributes {
#   foo = 'bar'
#   class = Neos.Fusion:DataStructure {
#     class1 = 'class1'
#     class2 = 'class2'
#   }
# }
#
prototype(Neos.Fusion:Attributes) {
  @class = 'Neos\\Fusion\\FusionObjects\\AttributesImplementation'
}

# Renders an HTML tag
#
# Usage:
# tag = Neos.Fusion:Tag {
#   tagName = 'h1'
#   attributes = {
#     class = 'some-class'
#   }
# }
#
prototype(Neos.Fusion:Tag) {
  @class = 'Neos\\Fusion\\FusionObjects\\TagImplementation'
  attributes = Neos.Fusion:DataStructure
  omitClosingTag = false
  selfClosingTag = false
}

# Renders an URI pointing to a controller/action
#
# Usage:
# uri = Neos.Fusion:UriBuilder {
#   package = 'Some.Package'
#   controller = 'Standard'
#   action = 'index'
# }
#
prototype(Neos.Fusion:UriBuilder) {
  @class = 'Neos\\Fusion\\FusionObjects\\UriBuilderImplementation'
  additionalParams = Neos.Fusion:DataStructure
  arguments = Neos.Fusion:DataStructure
  argumentsToBeExcludedFromQueryString = Neos.Fusion:DataStructure

  @exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\AbsorbingHandler'
}

# Modify given html content and add attributes
#
# Usage:
# augmentedHtml = Neos.Fusion:Augmenter {
#   class = 'some-class'
#   content = '<h1>Header</h1>'
# }
#
# Usage: as processor
# augmentedHtml = '<h1>Header</h1>'
# augmentedHtml.@process.augmenter = Neos.Fusion:Augmenter {
#   class = 'some-class'
# }
#
prototype(Neos.Fusion:Augmenter) < prototype(Neos.Fusion:Component) {
  @class = 'Neos\\Fusion\\FusionObjects\\AugmenterImplementation'

  # If more than one tag is found the content is wrapped in the fallback tag before augmentation
  fallbackTagName = 'div'

  # The content that shall be augmented
  content = ${value}

  # All other fusion properties are added to the html content as html attributes
}

# Renders an URI pointing to a resource
#
# Usage:
# fileUri = Neos.Fusion:ResourceUri {
#   path = 'resource://Some.Package/Public/Images/SomeImage.png'
# }
#
prototype(Neos.Fusion:ResourceUri) {
  @class = 'Neos\\Fusion\\FusionObjects\\ResourceUriImplementation'
  localize = true

  @exceptionHandler = 'Neos\\Fusion\\Core\\ExceptionHandlers\\AbsorbingHandler'
}

# Render a content fragment without any additional markup
# to allow placing conditions for multiple tags at once.
#
# Usage:
# renderer = afx`
#    <Neos.Fusion:Fragment @if.isEnabled={props.enable}>
#       <h1>Example</h1>
#       <h2>Content</h2>
#    </Neos.Fusion:Fragment>
# `
prototype(Neos.Fusion:Fragment) < prototype(Neos.Fusion:Component) {
  renderer = ${props.content}
}

# These are globally applied cache identifiers.
# If you don't make @cache.entryIdentifiers another prototype (like a Neos.Fusion:DataStructure)
# they will be rendered as this prototype, which means everything in here is added to ALL cached
# Fusion parts.
# The baseUri contains the protocol (http/https), domain and port.
#
# WARNING: Do not delete this prototype, it is used inside of \Neos\Fusion\Core\Cache\RuntimeContentCache::buildCacheIdentifierValues() as a fallback.
#
prototype(Neos.Fusion:GlobalCacheIdentifiers) < prototype(Neos.Fusion:DataStructure) {
  format = ${request.format}
  baseUri = ${String.toString(BaseUri.getConfiguredBaseUriOrFallbackToCurrentRequest(request.httpRequest))}
}
