prototype(Neos.Fusion:Value).@class = 'Neos\\Fusion\\FusionObjects\\ValueImplementation'

conditions.simpleValueTrue = 'Foo'
conditions.simpleValueTrue.@if.cond1 = true

conditions.simpleValueFalse < conditions.simpleValueTrue
conditions.simpleValueFalse.@if.cond1 = false

conditions.simpleValueAtLeastOneFalse < conditions.simpleValueTrue
conditions.simpleValueAtLeastOneFalse.@if.cond2 = ${2 < 1}

conditions.expressionTrue = ${foo}
conditions.expressionTrue.@if.cond1 = true

conditions.expressionFalse < conditions.expressionTrue
conditions.expressionFalse.@if.cond1 = false

conditions.expressionAtLeastOneFalse < conditions.expressionTrue
conditions.expressionAtLeastOneFalse.@if.cond2 = Neos.Fusion:Value {
	value = false
}

conditions.objectTrue = Neos.Fusion:Value {
	@if.cond1 = true

	value = 'Foo'
}
conditions.objectFalse < conditions.objectTrue
conditions.objectFalse.@if.cond1 = false

conditions.objectAtLeastOneFalse < conditions.objectTrue
conditions.objectAtLeastOneFalse.@if.cond2 = ${2 < 1}

conditions.objectThis = Neos.Fusion:Value {
	@if.cond1 = ${this.someValue}

	someValue = false

	value = 'Foo'
}

conditions.variableCondition = 'Rendered'
conditions.variableCondition.@if.cond1 = ${condition}

conditions.rawArray = Neos.Fusion:RawArray {
	key = 'foo'
	nullValue = ${null}
	keyNotSet = 'bar'
	keyNotSet.@if.cond = FALSE
}

conditions.attributes = Neos.Fusion:Attributes {
	key = 'foo'
	keyNotSet = 'bar'
	keyNotSet.@if.cond = FALSE
}

conditions.supportForConditionInProcess = Neos.Fusion:Value {
	value = 'originalValue'
	@process.wrap {
		expression = 'wrappedValue'
		@if.doIfTrue = TRUE
	}
}

conditions.supportForConditionInProcessFalse = Neos.Fusion:Value {
	value = 'originalValue'
	@process.wrap {
		expression = 'wrappedValue'
		@if.skipIfFalse = FALSE
	}
	@process.wrap2 = ${'wrappedValue2'}
	@process.wrap2.@if.skipIfFalse = FALSE
}

conditions.supportForConditionInProcessWithAdvancedProcess = Neos.Fusion:Value {
	value = 'originalValue'
	@process.wrap = Neos.Fusion:Value {
		value = 'wrappedValue'
		@if.doIfTrue = TRUE
	}
}

conditions.supportForConditionInProcessWithAdvancedProcessFalse = Neos.Fusion:Value {
	value = 'originalValue'
	@process.wrap = Neos.Fusion:Value {
		value = 'wrappedValue'
		@if.skipIfFalse = FALSE
	}
}

conditions.supportForTypoScriptObjectWithSubEvaluationUsedInProcessor = Value {
	value = 'basic'

	theArray = Array {
		something = ' appended'
		another = Value {
			value = ' more'
			@if.thisIsNotAppended = ${FALSE}
		}
	}

	@process.appendArray = ${value + this.theArray}
}

conditions.processorOnSimpleValueWithCondition = 'originalValue' {
	@if.cond1 = FALSE
	@process.wrap = ${'<wrap>' + value + '</wrap>'}
}

conditions.processorOnExpressionWithCondition = ${'expressionValue'} {
	@if.cond1 = FALSE
	@process.wrap = ${'<wrap>' + value + '</wrap>'}
}

conditions.processorOnObjectWithCondition = Neos.Fusion:Value {
	value = 'originalValue'
	@if.cond1 = FALSE

	@process.wrap = ${'<wrap>' + value + '</wrap>'}
}
