prototype(Neos.Fusion:TestRenderer).@class = 'Neos\\Fusion\\Tests\\Functional\\View\\Fixtures\\TestRenderer'
prototype(Neos.Fusion:Value).@class = 'Neos\\Fusion\\FusionObjects\\ValueImplementation'
prototype(Neos.Fusion:DataStructure).@class = 'Neos\\Fusion\\FusionObjects\\DataStructureImplementation'
prototype(Neos.Fusion:Tag) {
	# dummy declaration, will be overriden someplace - due to merged import of fixtures.
	@class = 'Neos\\Fusion\\FusionObjects\\TagImplementation'
	attributes = Neos.Fusion:DataStructure
	omitClosingTag = false
	selfClosingTag = false
}


prototype(Neos.Fusion:SpecialTag) < prototype(Neos.Fusion:Tag) {
  attributes.class = Neos.Fusion:TestRenderer {
    test = 'class'
  }
  attributes.tea = ${'green'}
}

nestedOverwritesAndProcessors.deepProcessorAppliesToSimpleValue = Neos.Fusion:SpecialTag {
  attributes.class.test.@process.addProcessed = ${value + ' processed'}
}

nestedOverwritesAndProcessors.deepProcessorAppliesToEel = Neos.Fusion:SpecialTag {
  attributes.tea.@process.addProcessed = ${value + ' infused'}
}

nestedOverwritesAndProcessors.deepProcessorAppliesWithNoBaseValue = Neos.Fusion:Value {
  value.@process.expectEmptyStringIfBaseIsNotDefined = ${value == '' ? 'EmptyString' : value}
}
