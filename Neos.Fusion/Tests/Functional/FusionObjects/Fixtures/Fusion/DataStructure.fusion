prototype(Neos.Fusion:DataStructure).@class = 'Neos\\Fusion\\FusionObjects\\DataStructureImplementation'
prototype(Neos.Fusion:TestRenderer).@class = 'Neos\\Fusion\\Tests\\Functional\\View\\Fixtures\\TestRenderer'

dataStructure.basicOrdering = Neos.Fusion:DataStructure {
  100 = Neos.Fusion:TestRenderer
  100.test = 'test100'

  10 = Neos.Fusion:TestRenderer
  10.test = 'test10'
}

dataStructure.positionalOrdering = Neos.Fusion:DataStructure {
  c = Neos.Fusion:TestRenderer
  c.test = 'before'
  c.@position = '10'

  a = Neos.Fusion:TestRenderer
  a.test = 'after'
  a.@position = '100'

  f = Neos.Fusion:TestRenderer
  f.test = 'middle'
  f.@position = '50'
}

dataStructure.startEndOrdering = Neos.Fusion:DataStructure {
  a = Neos.Fusion:TestRenderer
  a.test = 'after'
  a.@position = 'end'

  c = Neos.Fusion:TestRenderer
  c.test = 'before'
  c.@position = 'start'

  f = Neos.Fusion:TestRenderer
  f.test = 'middle'
  f.@position = '50'
}

# expected ordering:
# - e
# - d
# - foobar
# - f
# - g
# - 100
# - b
# - a
# - c
dataStructure.advancedStartEndOrdering = Neos.Fusion:DataStructure {
  a = Neos.Fusion:TestRenderer
  a.test = 'a'
  a.@position = 'end 10'

  b = Neos.Fusion:TestRenderer
  b.test = 'b'
  b.@position = 'end'

  c = Neos.Fusion:TestRenderer
  c.test = 'c'
  c.@position = 'end 20'

  d = Neos.Fusion:TestRenderer
  d.test = 'd'
  d.@position = 'start'

  e = Neos.Fusion:TestRenderer
  e.test = 'e'
  e.@position = 'start 10'

  f = Neos.Fusion:TestRenderer
  f.test = 'f'
  f.@position = '50'

  100 = Neos.Fusion:TestRenderer
  100.test = '100'

  foobar = Neos.Fusion:TestRenderer
  foobar.test = 'foobar'

  g = Neos.Fusion:TestRenderer
  g.test = 'g'
  g.@position = '90'
}

dataStructure.ignoreProperties < dataStructure.positionalOrdering {
  @ignoreProperties = ${['f']}
}

dataStructure.nestingWithAndWithoutObjectName = Neos.Fusion:DataStructure {
  keyWithoutType {
    bar {
      baz = 123
    }
  }
  keyWithType = Neos.Fusion:Value {
    value = 456
  }
  keyWithValue = 789
}

dataStructure.nestingWithNonExistingChildObject = Neos.Fusion:DataStructure {
  keyWithoutType {
    bar {
      baz = 123
    }
  }
  errorProperty = Some.NonExisting:Prototype
}

dataStructure.untypedChildKeysWithIf = Neos.Fusion:DataStructure {
  keyWithoutType {
    @if.display = true
    foo = 123
  }
  keyWithoutType2 {
    @if.display = false
    baz = 456
  }
}

dataStructure.untypedChildKeysWithProcess = Neos.Fusion:DataStructure {
  keyWithoutType {
    foo = 123
    @process.addKey = ${Array.push(value, 'baz')}
  }
}

dataStructure.untypedChildKeysWithThisContext = Neos.Fusion:DataStructure {
  keyWithoutType {
    foo = 123
    thisFoo = ${this.foo}
  }
}

dataStructure.untypedChildKeysWithPositionOrdering = Neos.Fusion:DataStructure {
  keyWithoutTypeFirst {
    foo = 123
  }
  keyWithoutTypeLast {
    @postion = 'before keyWithoutTypeFirst'
    baz = 456
  }
}

dataStructure.unsetChildKeyWillNotRender = Neos.Fusion:DataStructure {
  foo = 'bar'
  baz >
}

dataStructure.unsetUntypedChildKeyWillNotRender = Neos.Fusion:DataStructure {
  keyWithUnsetType = Neos.Fusion:Value {
    value = 123
  }
  keyWithUnsetType >
  keyWithUnsetType {
    bat = 123
  }
  buz = 456
}

dataStructure.nulledChildKeyWillRenderAsNull = Neos.Fusion:DataStructure {
  foo = 'bar'
  null1 = null
  null2 = ${null}
}

dataStructure.appliedNullValueWillRenderAsNull = Neos.Fusion:DataStructure {
  @apply.attributes = ${{
    nullAttribute: null
  }}
}
