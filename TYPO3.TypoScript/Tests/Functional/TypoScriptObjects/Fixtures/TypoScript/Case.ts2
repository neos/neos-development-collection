prototype(TYPO3.TypoScript:Case).@class = 'TYPO3\\TypoScript\\TypoScriptObjects\\CaseImplementation'
prototype(TYPO3.TypoScript:Matcher).@class = 'TYPO3\\TypoScript\\TypoScriptObjects\\MatcherImplementation'
prototype(TYPO3.TypoScript:TestRenderer).@class = 'TYPO3\\TypoScript\\Tests\\Functional\\View\\Fixtures\\TestRenderer'

case.numericMatching = TYPO3.TypoScript:Case {
	100.condition = ${true}
	100.type = 'TYPO3.TypoScript:Case.Test1'

	20.condition = ${cond}
	20.type = 'TYPO3.TypoScript:Case.Test2'
}

case.positionalMatching = TYPO3.TypoScript:Case {
	foo.condition = ${true}
	foo.type = 'TYPO3.TypoScript:Case.Test1'
	foo.@position = 'end'

	z.condition = ${cond}
	z.type = 'TYPO3.TypoScript:Case.Test2'
}



prototype(TYPO3.TypoScript:Case.Test1) < prototype(TYPO3.TypoScript:TestRenderer) {
	test = 'testconditionfalse'
}

prototype(TYPO3.TypoScript:Case.Test2) < prototype(TYPO3.TypoScript:TestRenderer) {
	test = 'testconditiontrue'
}

case.renderPath = TYPO3.TypoScript:Case {
	foo.condition = ${cond}
	foo.renderPath = '/renderPathRenderer/true'

	default.condition = ${true}
	default.renderPath = '/renderPathRenderer/false'
	default.@position = 'end'
}

case.renderPathWillWin < case.renderPath
case.renderPathWillWin {
	foo.type = 'TYPO3.TypoScript:Case.Test1'
}

renderPathRenderer.false = TYPO3.TypoScript:Case.Test1
renderPathRenderer.true = TYPO3.TypoScript:Case.Test2

case.ignoredPropertiesAreIgnored < case.numericMatching {
	@ignoreProperties = ${[1]}
	1 = TYPO3.TypoScript:TestRenderer {
		test = 'somethingwhichshallnotbeshown'
	}
}

case.renderer = TYPO3.TypoScript:Case {
	foo.condition = ${cond}
	foo.renderer = TYPO3.TypoScript:TestRenderer {
		test = 'testconditiontrue'
	}

	default.condition = ${true}
	default.renderer = TYPO3.TypoScript:TestRenderer {
		test = 'testconditionfalse'
	}
	default.@position = 'end'
}

case.rendererWithType < case.renderer {
	foo.type = 'TYPO3.TypoScript:Case.Test1'
	default.type = 'TYPO3.TypoScript:Case.Test1'
}

case.rendererWithRenderPath < case.renderer {
	foo.renderPath = '/renderPathRenderer/false'

	default.renderPath = '/renderPathRenderer/false'
}

case.rendererWorksWithEelAndSimpleTypes = TYPO3.TypoScript:Case {
	foo.condition = ${cond}
	foo.renderer = 'Xtestconditiontrue'

	default.condition = ${true}
	default.renderer = ${'Xtestconditionfalse'}
	default.@position = 'end'
}

case.rendererHasAccessToThis = TYPO3.TypoScript:Case {
	test1 {
		layout = "foo"
		condition = ${this.layout ? true : false}
		renderer = ${this.layout}
	}
}