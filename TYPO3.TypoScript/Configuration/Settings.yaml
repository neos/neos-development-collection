TYPO3:
  TypoScript:
    rendering:

      # Default Exception Handler class which should be used when a TypoScript object is rendered
      # to a string. This happens e.g. if a content element is rendered or inside a "Case" matcher.
      #
      # Can be overridden on a TypoScript-Object-level by setting the "@exceptionHandler" meta-property
      # in TypoScript.
      exceptionHandler: 'TYPO3\TypoScript\Core\ExceptionHandlers\XmlCommentHandler'

      # Inner Exception Handler class which should be used when a TypoScript object is evaluated,
      # e.g. can return arbitrary types and not just strings. By default, the exception handler just
      # continues throwing the exception upwards.
      #
      # However, this can be overridden on a TypoScript-Object-level by setting the "@exceptionHandler"
      # meta-property in TypoScript, and it is especially useful for e.g. the "TYPO3.TypoScript:ResourceUri"
      # TypoScript Object, which should just return NULL silently if an exception occurs.
      innerExceptionHandler: 'TYPO3\TypoScript\Core\ExceptionHandlers\BubblingHandler'
    debugMode: FALSE
    enableContentCache: TRUE

    # Default context objects that are available in Eel expressions
    #
    # New variables should be added with a package key prefix. Example:
    #
    #   defaultContext:
    #     'MyPackage.String': 'MyPackage\Helper\StringHelper'
    #
    defaultContext:
      String: 'TYPO3\Eel\Helper\StringHelper'
      Array: 'TYPO3\Eel\Helper\ArrayHelper'
      Date: 'TYPO3\Eel\Helper\DateHelper'
      Configuration: 'TYPO3\Eel\Helper\ConfigurationHelper'
      Math: 'TYPO3\Eel\Helper\MathHelper'
      Json: 'TYPO3\Eel\Helper\JsonHelper'
      Security: 'TYPO3\Eel\Helper\SecurityHelper'
      Translation: 'TYPO3\Flow\I18n\EelHelper\TranslationHelper'
      Type: 'TYPO3\Eel\Helper\TypeHelper'
      I18n: 'TYPO3\Flow\I18n\EelHelper\TranslationHelper'